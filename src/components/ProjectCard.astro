---
import {Picture, getImage} from 'astro:assets';
import {getLanguage, useTranslations} from "../i18n/utils";
import faXmark from '@fortawesome/free-solid-svg-icons/faXmark';
import faExpand from "@fortawesome/free-solid-svg-icons/faExpand";
import FontAwesome from "./FontAwesome.astro";
import {marked} from "marked";
import {GetImageResult, ImageMetadata} from "astro";

export interface Props {
    id: string;
    projectType: string;
    name: string;
    description: string;
    body: string;
    cover: ImageMetadata;
    logo: ImageMetadata;
    medias: ImageMetadata[] | undefined;
    startDate: string;
    endDate: string;
}

const {id, projectType, name, description, body, cover, logo, medias, startDate, endDate} = Astro.props;
const lang = getLanguage(Astro.preferredLocale);
const trans = useTranslations(lang);
const translatedProjectType = trans('project-type.' + projectType);
const formattedBody = marked(body);
const optimizedMedias: any[] = [];
const thumbWidth = 320;

function calculateNewDimensions(media: ImageMetadata, thumbWidth: number) {
    let {width, height} = media;
    const aspectRatio = width / height;

    if (width < thumbWidth && height < thumbWidth) {
        return {newWidth: width, newHeight: height};
    }

    if (width < thumbWidth) {
        width = thumbWidth;
        height = Math.round((thumbWidth / media.width) * media.height);
    } else if (height < thumbWidth) {
        height = thumbWidth;
        width = Math.round((thumbWidth / media.height) * media.width);
    } else {
        if (aspectRatio > 1) {
            height = thumbWidth;
            width = Math.round(thumbWidth * aspectRatio);
        } else {
            width = thumbWidth;
            height = Math.round(thumbWidth / aspectRatio);
        }
    }

    return {newWidth: width, newHeight: height};
}

async function optimizeMedia(media: ImageMetadata) {
    const {newWidth, newHeight} = calculateNewDimensions(media, thumbWidth);

    let fullSrc = {
        src: media.src,
        width: media.width,
        height: media.height
    };

    if (media.format !== 'avif') {
        const convertedImage: GetImageResult = await getImage({src: media, format: 'avif'});
        const convertedImageMetadata: ImageMetadata = convertedImage.rawOptions.src as ImageMetadata;

        fullSrc = {
            src: convertedImage.src,
            width: convertedImageMetadata.width,
            height: convertedImageMetadata.height
        };
    }

    const thumbnailSrc: GetImageResult = await getImage({
        src: media,
        format: 'avif',
        width: newWidth,
        height: newHeight
    });
    const thumbnailSrcMetadata: ImageMetadata = thumbnailSrc.rawOptions.src as ImageMetadata;

    return {
        original: fullSrc,
        thumbnail: {
            src: thumbnailSrc.src,
            width: thumbnailSrcMetadata.width,
            height: thumbnailSrcMetadata.height
        }
    };
}

if (medias) {
    const optimizedMediaPromises = medias.map(optimizeMedia);
    optimizedMedias.push(...await Promise.all(optimizedMediaPromises));
}

const langPrefix = lang + '-';
const projectSlug = (id.replace(/[^a-zA-Z0-9]/g, '-')).replace(new RegExp(`^${langPrefix}`), '');
const modalId = 'modal-' + projectSlug;
---

<div class="project-card" data-bs-toggle="modal" data-bs-target={`#${modalId}`}>
    <div class="header">
        <Picture src={cover} formats={['avif', 'webp']} alt={`Couverture du projet ${name}`}/>
        <div class="project-type-badge">
            {translatedProjectType}
        </div>
    </div>
    <div class="content">
        <div class="title">{name}</div>
        <div class="desc">{description}</div>
    </div>
</div>

<div class="modal fade project-modal" id={modalId} tabindex="-1" data-project-slug={projectSlug}>
    <div class="modal-dialog modal-dialog-scrollable modal-xl">
        <div class="project-modal-content">
            <div class="modal-header">
                <div class="background-image">
                    <Picture src={cover} formats={['avif', 'webp']} alt={`Couverture du projet ${name}`}/>
                </div>
                <button class="close-btn" data-bs-dismiss="modal" aria-label="Close">
                    <FontAwesome icon={faXmark}/>
                </button>
                <div class="project-meta">
                    <div class="logo">
                        {logo.format === "gif" && (
                                <img src={logo.src} alt={`Logo du projet ${name}`}/>
                        )}
                        {logo.format !== "gif" && (
                                <Picture src={logo} formats={['avif', 'webp']} alt={`Logo du projet ${name}`}/>
                        )}
                    </div>
                    <div class="logo-width-faker"></div>
                    <div class="meta">
                        <h4 class="name">{name}</h4>
                        <div class="date">{startDate} - {endDate}</div>
                    </div>
                </div>
            </div>
            <div class="modal-body">
                <div class="section">
                    <h4>{trans('description')}</h4>
                    <Fragment set:html={formattedBody}/>
                </div>
                {medias && medias.length > 0 && (
                        <div class="section">
                            <h4>{trans('medias')}</h4>
                            <div class="medias" id={`medias-${modalId}`}>
                                {optimizedMedias.map((media) => (
                                        <a href={media.original.src}
                                           data-pswp-width={media.original.width}
                                           data-pswp-height={media.original.height}
                                           target="_blank"
                                           class="media">
                                            <img src={media.thumbnail.src} alt="" loading="lazy" decoding="async"/>
                                            <div class="overlay">
                                                <div class="icon">
                                                    <FontAwesome icon={faExpand}/>
                                                </div>
                                            </div>
                                        </a>
                                ))}
                            </div>
                        </div>
                )}
            </div>
        </div>
    </div>
</div>

<script>
    import PhotoSwipeLightbox from "photoswipe/lightbox";
    import 'photoswipe/style.css';
    import {Modal} from "bootstrap";

    const lightboxInstances = new Map();

    function initPhotoSwipeLightbox(medias) {
        const lightbox = new PhotoSwipeLightbox({
            gallery: `#${medias.id}`,
            children: 'a',
            pswpModule: () => import('photoswipe')
        });
        lightbox.init();
        return lightbox;
    }

    function adaptThumbnailSizeInUrl(url, desiredWidth) {
        const defaultThumbWidth = 320;

        if (desiredWidth === defaultThumbWidth) {
            return url;
        }

        const parsedUrl = new URL(url);
        const urlParams = new URLSearchParams(parsedUrl.search);
        const originalWidth = parseInt(urlParams.get('w') || '0', 10);
        const originalHeight = parseInt(urlParams.get('h') || '0', 10);

        if (originalWidth && originalHeight) {
            let newWidth, newHeight;
            const aspectRatio = originalWidth / originalHeight;

            if (originalWidth < desiredWidth) {
                newWidth = desiredWidth;
                newHeight = Math.round((desiredWidth / originalWidth) * originalHeight);
            } else if (originalHeight < desiredWidth) {
                newHeight = desiredWidth;
                newWidth = Math.round((desiredWidth / originalHeight) * originalWidth);
            } else {
                if (aspectRatio > 1) {
                    newHeight = desiredWidth;
                    newWidth = Math.round(desiredWidth * aspectRatio);
                } else {
                    newWidth = desiredWidth;
                    newHeight = Math.round(desiredWidth / aspectRatio);
                }
            }

            urlParams.set('w', newWidth.toString());
            urlParams.set('h', newHeight.toString());
            parsedUrl.search = urlParams.toString();
            return parsedUrl.toString();
        }
        return url;
    }

    function updateUrlParams(slug, add = true) {
        const url = new URL(window.location.href);
        const urlParams = new URLSearchParams(url.search);
        if (add) {
            urlParams.set('project', slug);
        } else {
            urlParams.delete('project');
        }
        const newUrl = urlParams.toString() ? `${url.origin}${url.pathname}?${urlParams.toString()}` : `${url.origin}${url.pathname}`;
        window.history.pushState({}, '', newUrl);
    }

    function initializeModals() {
        const allProjectModals = document.querySelectorAll('.project-modal');

        allProjectModals.forEach((modal) => {
            modal.addEventListener('shown.bs.modal', () => {
                const projectSlug = modal.getAttribute('data-project-slug') || '';
                updateUrlParams(projectSlug);

                const medias = modal.querySelector('.medias');
                if (medias) {
                    const mediaElements = medias.querySelectorAll('.media');
                    mediaElements.forEach((mediaElement) => {
                        const thumbnail = mediaElement.querySelector('img')!;
                        const actualWidth = mediaElement.getBoundingClientRect().width * window.devicePixelRatio;
                        thumbnail.src = adaptThumbnailSizeInUrl(thumbnail.src, actualWidth);
                    });

                    const lightbox = initPhotoSwipeLightbox(medias);
                    lightboxInstances.set(modal.id, lightbox);
                }
            });

            modal.addEventListener('hidden.bs.modal', () => {
                updateUrlParams('', false);

                const lightbox = lightboxInstances.get(modal.id);
                if (lightbox) {
                    lightbox.destroy();
                    lightboxInstances.delete(modal.id);
                }
            });
        });
    }

    function showModalFromUrl() {
        const url = new URL(window.location.href);
        const urlParams = new URLSearchParams(url.search);
        const projectSlug = urlParams.get('project');
        if (projectSlug) {
            const modal = document.getElementById('modal-' + projectSlug);
            if (modal) {
                const modalInstance = new Modal(modal);
                modalInstance.show();
            }
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        initializeModals();
        showModalFromUrl();
    });
</script>