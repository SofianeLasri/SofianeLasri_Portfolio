---
import {Picture, getImage} from 'astro:assets';
import {getLanguage, useTranslations} from "../i18n/utils";
import faXmark from '@fortawesome/free-solid-svg-icons/faXmark';
import faExpand from "@fortawesome/free-solid-svg-icons/faExpand";
import FontAwesome from "./FontAwesome.astro";
import {marked} from "marked";

const thumbWidth = 320;
const {id, projectType, name, description, body, cover, logo, medias, startDate, endDate} = Astro.props;
const lang = getLanguage(Astro.preferredLocale);
const trans = useTranslations(lang);
const translatedProjectType = trans('project-type.' + projectType);
const formattedBody = marked(body);
const optimizedMedias: any[] = [];

if (medias) {
    for (const media of medias) {
        if (media.width < thumbWidth && media.height < thumbWidth) {
            optimizedMedias.push({original: media, thumbnail: media});
            continue;
        }

        let newWidth = media.width;
        let newHeight = media.height;

        if (media.width < thumbWidth) {
            newWidth = thumbWidth;
            newHeight = Math.round((thumbWidth / media.width) * media.height);
        } else if (media.height < thumbWidth) {
            newHeight = thumbWidth;
            newWidth = Math.round((thumbWidth / media.height) * media.width);
        } else {
            const aspectRatio = media.width / media.height;
            if (aspectRatio > 1) {
                newHeight = thumbWidth;
                newWidth = Math.round(thumbWidth * aspectRatio);
            } else {
                newWidth = thumbWidth;
                newHeight = Math.round(thumbWidth / aspectRatio);
            }
        }

        const fullSrc = await getImage({src: media, format: 'avif'});
        const thumbnailSrc = await getImage({src: media, format: 'avif', width: newWidth, height: newHeight});
        optimizedMedias.push({original: fullSrc, thumbnail: thumbnailSrc});
    }
}

const modalId = 'modal-' + id.replace(/[^a-zA-Z0-9]/g, '-');
---

<div class="project-card" data-bs-toggle="modal" data-bs-target={`#${modalId}`}>
    <div class="header">
        <Picture src={cover} formats={['avif', 'webp']} alt={`Couverture du projet ${name}`}/>
        <div class="project-type-badge">
            {translatedProjectType}
        </div>
    </div>
    <div class="content">
        <div class="title">{name}</div>
        <div class="desc">{description}</div>
    </div>
</div>

<div class="modal fade project-modal" id={modalId} tabindex="-1">
    <div class="modal-dialog modal-dialog-scrollable modal-xl">
        <div class="project-modal-content">
            <div class="modal-header">
                <div class="background-image">
                    <Picture src={cover} formats={['avif', 'webp']} alt={`Couverture du projet ${name}`}/>
                </div>
                <button class="close-btn" data-bs-dismiss="modal" aria-label="Close">
                    <FontAwesome icon={faXmark}/>
                </button>
                <div class="project-meta">
                    <div class="logo">
                        {logo.format === "gif" && (
                                <img src={logo.src} alt={`Logo du projet ${name}`}/>
                        )}
                        {logo.format !== "gif" && (
                                <Picture src={logo} formats={['avif', 'webp']} alt={`Logo du projet ${name}`}/>
                        )}
                    </div>
                    <div class="logo-width-faker"></div>
                    <div class="meta">
                        <h4 class="name">{name}</h4>
                        <div class="date">{startDate} - {endDate}</div>
                    </div>
                </div>
            </div>
            <div class="modal-body">
                <div class="section">
                    <h4>{trans('description')}</h4>
                    <Fragment set:html={formattedBody}/>
                </div>
                {medias && medias.length > 0 && (
                        <div class="section">
                            <h4>{trans('medias')}</h4>
                            <div class="medias" id={`medias-${modalId}`}>
                                {optimizedMedias.map((media) => (
                                        <a href={media.original.src}
                                           data-pswp-width={media.original.rawOptions.src.width}
                                           data-pswp-height={media.original.rawOptions.src.height}
                                           target="_blank"
                                           class="media">
                                            <img src={media.thumbnail.src} alt=""/>
                                            <div class="overlay">
                                                <div class="icon">
                                                    <FontAwesome icon={faExpand}/>
                                                </div>
                                            </div>
                                        </a>
                                ))}
                            </div>
                        </div>
                )}
            </div>
        </div>
    </div>
</div>

<script>
    import PhotoSwipeLightbox from "photoswipe/lightbox";
    import 'photoswipe/style.css';

    const allProjectModals = document.querySelectorAll('.project-modal');
    const defaultThumbWidth = 320;

    allProjectModals.forEach((modal) => {
        modal.addEventListener('shown.bs.modal', () => {
            const medias = modal.querySelector('.medias');
            if (medias) {
                const mediaElements = medias.querySelectorAll('.media');
                mediaElements.forEach((mediaElement: Element) => {
                    const thumbnail = mediaElement.querySelector('img');
                    thumbnail.src = adaptThumbnailSizeInUrl(thumbnail.src, mediaElement.getBoundingClientRect().width * window.devicePixelRatio);
                });

                const lightbox = new PhotoSwipeLightbox({
                    gallery: '#' + medias.id,
                    children: 'a',
                    pswpModule: () => import('photoswipe')
                });
                lightbox.init();
            }
        });

        modal.addEventListener('hidden.bs.modal', () => {
            const medias = modal.querySelector('.medias');
            if (medias) {
                const lightbox = new PhotoSwipeLightbox({
                    gallery: '#' + medias.id,
                    children: 'a',
                    pswpModule: () => import('photoswipe')
                });
                lightbox.destroy();
            }
        });
    });

    function adaptThumbnailSizeInUrl(url: string, desiredWith: number): string {
        if(desiredWith === defaultThumbWidth) {
            return url;
        }

        const parsedUrl = new URL(url);
        const urlParams = new URLSearchParams(parsedUrl.search);
        const w = urlParams.get('w');
        const h = urlParams.get('h');
        const href = urlParams.get('href')

        if (w && h && href) {
            const hrefParams = new URLSearchParams(href.split('?')[1]);
            const originalWidth = hrefParams.get('origWidth');
            const originalHeight = hrefParams.get('origHeight');

            let newWidth: number;
            let newHeight: number;

            if (originalWidth < desiredWith) {
                newWidth = desiredWith;
                newHeight = Math.round((desiredWith / originalWidth) * originalHeight);
            } else if (originalHeight < desiredWith) {
                newHeight = desiredWith;
                newWidth = Math.round((desiredWith / originalHeight) * originalWidth);
            } else {
                const aspectRatio = originalWidth / originalHeight;
                if (aspectRatio > 1) {
                    newHeight = desiredWith;
                    newWidth = Math.round(desiredWith * aspectRatio);
                } else {
                    newWidth = desiredWith;
                    newHeight = Math.round(desiredWith / aspectRatio);
                }
            }

            urlParams.set('w', newWidth.toString());
            urlParams.set('h', newHeight.toString());

            parsedUrl.search = urlParams.toString();
            return parsedUrl.toString();
        }
        return url;
    }
</script>