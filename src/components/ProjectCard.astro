---
import {Picture} from 'astro:assets';
import {getLanguage, useTranslations} from "../i18n/utils";
import faXmark from '@fortawesome/free-solid-svg-icons/faXmark';
import faExpand from "@fortawesome/free-solid-svg-icons/faExpand";
import faFilm from "@fortawesome/free-solid-svg-icons/faFilm";
import FontAwesome from "./FontAwesome.astro";
import {marked} from "marked";
import {ImageMetadata} from "astro";

export interface Props {
    id: string;
    projectType: string;
    name: string;
    description: string;
    body: string;
    cover: ImageMetadata;
    logo: ImageMetadata;
    medias: ImageMetadata[] | undefined;
    videos: {
        src: string;
        cover: ImageMetadata;
    }[] | undefined;
    startDate: string;
    endDate: string;
}

const {
    id,
    projectType,
    name,
    description,
    body,
    cover,
    logo,
    medias,
    videos,
    startDate,
    endDate
} = Astro.props;
const lang = getLanguage(Astro.preferredLocale);
const trans = useTranslations(lang);
const translatedProjectType = trans('project-type.' + projectType);
const formattedBody = marked(body);

const langPrefix = lang + '-';
const projectSlug = (id.replace(/[^a-zA-Z0-9]/g, '-')).replace(new RegExp(`^${langPrefix}`), '');
const modalId = 'modal-' + projectSlug;
---

<div class="project-card" data-bs-toggle="modal" data-bs-target={`#${modalId}`}>
    <div class="header">
        <Picture src={cover} formats={['avif', 'webp']} alt={`Couverture du projet ${name}`}/>
        <div class="project-type-badge">
            {translatedProjectType}
        </div>
    </div>
    <div class="content">
        <div class="title">{name}</div>
        <div class="desc">{description}</div>
    </div>
</div>

<div class="modal fade project-modal" id={modalId} tabindex="-1" data-project-slug={projectSlug}>
    <div class="modal-dialog modal-dialog-scrollable modal-xl">
        <div class="project-modal-content">
            <div class="modal-header">
                <div class="background-image">
                    <Picture src={cover} formats={['avif', 'webp']} alt={`Couverture du projet ${name}`}/>
                </div>
                <button class="close-btn" data-bs-dismiss="modal" aria-label="Close">
                    <FontAwesome icon={faXmark}/>
                </button>
                <div class="project-meta">
                    <div class="logo">
                        {logo.format === "gif" && (
                                <img src={logo.src} alt={`Logo du projet ${name}`}/>
                        )}
                        {logo.format !== "gif" && (
                                <Picture src={logo} formats={['avif', 'webp']} alt={`Logo du projet ${name}`}/>
                        )}
                    </div>
                    <div class="logo-width-faker"></div>
                    <div class="meta">
                        <h4 class="name">{name}</h4>
                        <div class="date">{startDate} - {endDate}</div>
                    </div>
                </div>
            </div>
            <div class="modal-body">
                <div class="section">
                    <h4>{trans('description')}</h4>
                    <Fragment set:html={formattedBody}/>
                </div>
                {((medias && medias.length > 0) || (videos && videos.length > 0)) && (
                        <div class="section">
                            <h4>{trans('medias')}</h4>
                            <div class="medias" id={`medias-${modalId}`}>
                                {videos && videos.map((video) => (
                                        <a href={video.src}
                                           data-pswp-width={video.cover.width}
                                           data-pswp-height={video.cover.height}
                                           data-pswp-type="video"
                                           class="media">
                                            <Picture src={video.cover} formats={['avif', 'webp']} alt="" quality="mid"/>
                                            <div class="overlay">
                                                <div class="icon">
                                                    <FontAwesome icon={faFilm}/>
                                                </div>
                                            </div>
                                        </a>
                                ))}
                                {medias && medias.map((media) => (
                                        <a href={media.src}
                                           data-pswp-width={media.width}
                                           data-pswp-height={media.height}
                                           target="_blank"
                                           class="media">
                                            <Picture src={media} formats={['avif', 'webp']} alt="" quality="mid"/>
                                            <div class="overlay">
                                                <div class="icon">
                                                    <FontAwesome icon={faExpand}/>
                                                </div>
                                            </div>
                                        </a>
                                ))}
                            </div>
                        </div>
                )}
            </div>
        </div>
    </div>
</div>

<script>
    import PhotoSwipeLightbox from "photoswipe/lightbox";
    import PhotoSwipeVideoPlugin from "../js/photoswipe-video-plugin.esm.min.js";
    import 'photoswipe/style.css';
    import {Modal} from "bootstrap";

    const lightboxInstances = new Map();

    function initPhotoSwipeLightbox(medias: HTMLElement) {
        const lightbox = new PhotoSwipeLightbox({
            gallery: `#${medias.id}`,
            children: 'a',
            pswpModule: () => import('photoswipe')
        });
        new PhotoSwipeVideoPlugin(lightbox);
        lightbox.init();
        return lightbox;
    }

    function updateUrlParams(slug: string, add: boolean = true) {
        const url = new URL(window.location.href);
        const urlParams = new URLSearchParams(url.search);
        if (add) {
            urlParams.set('project', slug);
        } else {
            urlParams.delete('project');
        }
        const newUrl = urlParams.toString() ? `${url.origin}${url.pathname}?${urlParams.toString()}` : `${url.origin}${url.pathname}`;
        window.history.pushState({}, '', newUrl);
    }

    function initializeModals() {
        const allProjectModals = document.querySelectorAll('.project-modal');

        allProjectModals.forEach((modal) => {
            modal.addEventListener('shown.bs.modal', () => {
                const projectSlug = modal.getAttribute('data-project-slug') || '';
                updateUrlParams(projectSlug);

                const medias: HTMLElement = modal.querySelector('.medias') as HTMLElement;
                if (medias) {
                    const lightbox = initPhotoSwipeLightbox(medias);
                    lightboxInstances.set(modal.id, lightbox);
                }
            });

            modal.addEventListener('hidden.bs.modal', () => {
                updateUrlParams('', false);

                const lightbox = lightboxInstances.get(modal.id);
                if (lightbox) {
                    lightbox.destroy();
                    lightboxInstances.delete(modal.id);
                }
            });
        });
    }

    function showModalFromUrl() {
        const url = new URL(window.location.href);
        const urlParams = new URLSearchParams(url.search);
        const projectSlug = urlParams.get('project');
        if (projectSlug) {
            const modal = document.getElementById('modal-' + projectSlug);
            if (modal) {
                const modalInstance = new Modal(modal);
                modalInstance.show();
            }
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        initializeModals();
        showModalFromUrl();
    });
</script>