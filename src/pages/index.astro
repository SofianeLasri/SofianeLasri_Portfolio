---
import {getLanguage, useTranslations} from "../i18n/utils";
import {Picture} from 'astro:assets';
import {getEntry, getCollection} from 'astro:content';
import Layout from '../layouts/Layout.astro';
import portraitSansFond from '../images/portrait-sans-fond.avif';
import dotsGrid from '../images/dots-grid.svg?raw';
import stackIcon from '../images/sections-icons/stack.svg?raw';
import monolithsIcon from '../images/sections-icons/monoliths.svg?raw';
import ExperienceCard from "../components/ExperienceCard.astro";
import SectionHeader from "../components/SectionHeader.astro";
import ProjectCard from "../components/ProjectCard.astro";
import atomIcon from '../images/sections-icons/atom.svg?raw';
import EducationCareerCard from "../components/EducationCareerCard.astro";
import Navbar from "../components/Navbar.astro";
import {SoftSkill, SoftSkills, SoftSkillType} from "../content/config";

const lang = getLanguage(Astro.preferredLocale);
const trans = useTranslations(lang);

const allSoftSkills: SoftSkills = await getEntry('soft-skills', lang + '/soft-skills')
    .then((entry) => {
        if (!entry) return { framework: [], language: [], additional: [] };
        return entry.data;
    });

const allTechnologies = await getCollection('technologies');

const softSkillsCategoriesTitles = {
    "framework": trans('framework-and-libraries'),
    "language": trans('programming-languages'),
    "additional": trans('additional-skills'),
}

const projects = await getCollection("projects", ({id}) => {
    return id.startsWith(lang + '/');
});

const education = await getCollection("education", ({id}) => {
    return id.startsWith(lang + '/');
});

const career = await getCollection("career", ({id}) => {
    return id.startsWith(lang + '/');
});

function formatDate(isoDate: Date | null = null) {
    if (isoDate === null) return trans('today-short');
    let date = new Date(isoDate).toLocaleDateString(lang, {month: 'short', year: 'numeric'});
    return date.charAt(0).toUpperCase() + date.slice(1);
}

const sortedAndFormattedEducation = education.sort((a, b) => new Date(b.data.startDate).getTime() - new Date(a.data.startDate).getTime())
    .map((education) => ({
        ...education,
        data: {
            ...education.data,
            startDate: formatDate(education.data.startDate),
            endDate: formatDate(education.data.endDate),
        }
    }));

const sortedAndFormattedCareer = career.sort((a, b) => new Date(b.data.startDate).getTime() - new Date(a.data.startDate).getTime())
    .map((career) => ({
        ...career,
        data: {
            ...career.data,
            startDate: formatDate(career.data.startDate),
            endDate: formatDate(career.data.endDate),
        }
    }));

const sortedAndFormattedProjects = projects.sort((a, b) => new Date(b.data.endDate).getTime() - new Date(a.data.endDate).getTime())
    .map((project) => ({
        ...project,
        data: {
            ...project.data,
            startDate: formatDate(project.data.startDate),
            endDate: formatDate(project.data.endDate),
        }
    }));
---

<Layout title="Sofiane Lasri">
    <Navbar/>
    <main>
        <section class="hero-wrapper">
            <div class="hero">
                <div class="portrait">
                    <Fragment set:html={dotsGrid}/>
                    <div class="portrait-wrapper">
                        <Picture src={portraitSansFond} loading="eager"
                                 alt="Portrait de Sofiane Lasri, sans aucune Ã©gocentrie."/>
                    </div>
                </div>
                <div class="content">
                    <div class="heading">
                        <div class="meta-title">{trans('hero.welcome')}</div>
                        <h1 class="title">{trans('hero.title')} <span class="bg-gradient-primary">Sofiane Lasri</span>,
                        </h1>
                        <h2 class="subtitle">{trans('hero.subtitle')}</h2>
                    </div>
                    <div class="about-me">
                        <p>{trans('about-me.part1')}</p>
                        <p>{trans('about-me.part2')}</p>
                    </div>

                    <div class="d-flex flex-wrap gap-2">
                        <a href="https://1drv.ms/b/s!Atk178NpnuLmhJoiwLEN2FRww-mGcA?e=I1kL8w" target="_blank"
                           class="btn" aria-label={trans('btn.download-cv')}>{trans('btn.download-cv')}</a>
                        <a href="https://github.com/SofianeLasri/" target="_blank" class="btn"
                           aria-label={trans('btn.github')}>{trans('btn.github')}</a>
                        <a href="https://www.linkedin.com/in/sofiane-lasri-trienpont/" target="_blank"
                           class="btn" aria-label={trans('btn.linkedin')}>{trans('btn.linkedin')}</a>
                        <a href="https://dribbble.com/SofianeLasri" target="_blank" class="btn"
                           aria-label={trans('btn.dribbble')}>{trans('btn.dribbble')}</a>
                    </div>
                </div>
            </div>
        </section>

        <section id="experience" class="body-section three-columns">
            <SectionHeader title={trans('section.experience-skills')} metaTitle={trans('meta.experience')}
                           icon={stackIcon}/>
            {Object.keys(allSoftSkills).map((technoType) => (
                    <div class="sub-section">
                        <h2 class="subtitle">{softSkillsCategoriesTitles[technoType as SoftSkillType]}</h2>
                        <div class="cards">
                            {(allSoftSkills as SoftSkills)[technoType as SoftSkillType].map((softSkill: SoftSkill) => {
                                let techno = allTechnologies.find((techno) => techno.id === softSkill.techno.id);
                                if (!techno) return null;

                                return (
                                        <ExperienceCard
                                                isPrimary={softSkill.preferred}
                                                technoType={trans(techno.data.type)}
                                                logo={techno.data.logo}
                                                name={techno.data.name}
                                                review={softSkill.review}
                                        />
                                );
                            })}
                        </div>
                    </div>
            ))}
        </section>

        <section id="projects" class="body-section three-columns">
            <SectionHeader title={trans('section.projects')} metaTitle={trans('meta.portfolio')} icon={monolithsIcon}/>
            <div class="sub-section">
                <div class="cards">
                    {sortedAndFormattedProjects.map((project) => (
                            <ProjectCard id={project.slug} projectType={project.data.category} name={project.data.name}
                                         description={project.data.description} body={project.body}
                                         cover={project.data.cover} logo={project.data.logo}
                                         medias={project.data.medias} videos={project.data.videos}
                                         startDate={project.data.startDate} endDate={project.data.endDate}/>
                    ))}
                </div>
            </div>
        </section>

        <section id="education-carreer" class="body-section two-columns">
            <SectionHeader title={trans('section.education-career')} metaTitle={trans('meta.education-career')}
                           icon={atomIcon}/>
            <div class="sub-section">
                <div class="cards">
                    <h2 class="subtitle">{trans('section.education')}</h2>
                    {sortedAndFormattedEducation.map((education) => (
                            <EducationCareerCard name={education.data.name}
                                                 description={education.data.description}
                                                 logo={education.data.logo}
                                                 startDate={education.data.startDate}
                                                 endDate={education.data.endDate}/>
                    ))}
                </div>
                <div class="cards">
                    <h2 class="subtitle">{trans('section.career')}</h2>
                    {sortedAndFormattedCareer.map((career) => (
                            <EducationCareerCard name={career.data.name}
                                                 description={career.data.description}
                                                 logo={career.data.logo}
                                                 startDate={career.data.startDate}
                                                 endDate={career.data.endDate}/>
                    ))}
                </div>
            </div>
        </section>
    </main>
</Layout>